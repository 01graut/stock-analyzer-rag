"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDropdown_unstable", {
    enumerable: true,
    get: function() {
        return useDropdown_unstable;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _reactfield = require("@fluentui/react-field");
const _reacticons = require("@fluentui/react-icons");
const _reactutilities = require("@fluentui/react-utilities");
const _dropdownKeyActions = require("../../utils/dropdownKeyActions");
const _useComboboxBaseState = require("../../utils/useComboboxBaseState");
const _useComboboxPositioning = require("../../utils/useComboboxPositioning");
const _useTriggerListboxSlots = require("../../utils/useTriggerListboxSlots");
const _Listbox = require("../Listbox/Listbox");
const useDropdown_unstable = (props, ref)=>{
    // Merge props from surrounding <Field>, if any
    props = (0, _reactfield.useFieldControlProps_unstable)(props, {
        supportsLabelFor: true,
        supportsSize: true
    });
    const baseState = (0, _useComboboxBaseState.useComboboxBaseState)(props);
    const { activeOption, getIndexOfId, getOptionsMatchingText, open, setActiveOption, setFocusVisible, setOpen } = baseState;
    const { primary: triggerNativeProps, root: rootNativeProps } = (0, _reactutilities.getPartitionedNativeProps)({
        props,
        primarySlotTagName: 'button',
        excludedPropNames: [
            'children'
        ]
    });
    const [comboboxPopupRef, comboboxTargetRef] = (0, _useComboboxPositioning.useComboboxPositioning)(props);
    // jump to matching option based on typing
    const searchString = _react.useRef('');
    const [setKeyTimeout, clearKeyTimeout] = (0, _reactutilities.useTimeout)();
    const getNextMatchingOption = ()=>{
        // first check for matches for the full searchString
        let matcher = (optionText)=>optionText.toLowerCase().indexOf(searchString.current) === 0;
        let matches = getOptionsMatchingText(matcher);
        let startIndex = activeOption ? getIndexOfId(activeOption.id) : 0;
        // if the dropdown is already open and the searchstring is a single character,
        // then look after the current activeOption for letters
        // this is so slowly typing the same letter will cycle through matches
        if (open && searchString.current.length === 1) {
            startIndex++;
        }
        // if there are no direct matches, check if the search is all the same letter, e.g. "aaa"
        if (!matches.length) {
            const letters = searchString.current.split('');
            const allSameLetter = letters.length && letters.every((letter)=>letter === letters[0]);
            // if the search is all the same letter, cycle through options starting with that letter
            if (allSameLetter) {
                startIndex++;
                matcher = (optionText)=>optionText.toLowerCase().indexOf(letters[0]) === 0;
                matches = getOptionsMatchingText(matcher);
            }
        }
        // if there is an active option and multiple matches,
        // return first matching option after the current active option, looping back to the top
        if (matches.length > 1 && activeOption) {
            const nextMatch = matches.find((option)=>getIndexOfId(option.id) >= startIndex);
            return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];
        }
        var _matches_;
        return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : undefined;
    };
    const onTriggerKeyDown = (ev)=>{
        // clear timeout, if it exists
        clearKeyTimeout();
        // if the key was a char key, update search string
        if ((0, _dropdownKeyActions.getDropdownActionFromKey)(ev) === 'Type') {
            // update search string
            searchString.current += ev.key.toLowerCase();
            setKeyTimeout(()=>{
                searchString.current = '';
            }, 500);
            // update state
            !open && setOpen(ev, true);
            const nextOption = getNextMatchingOption();
            setActiveOption(nextOption);
            setFocusVisible(true);
        }
    };
    // resolve button and listbox slot props
    let triggerSlot;
    let listboxSlot;
    triggerSlot = _reactutilities.slot.always(props.button, {
        defaultProps: {
            type: 'button',
            tabIndex: 0,
            children: baseState.value || props.placeholder,
            ...triggerNativeProps
        },
        elementType: 'button'
    });
    triggerSlot.onKeyDown = (0, _reactutilities.mergeCallbacks)(onTriggerKeyDown, triggerSlot.onKeyDown);
    listboxSlot = baseState.open || baseState.hasFocus ? _reactutilities.slot.optional(props.listbox, {
        renderByDefault: true,
        defaultProps: {
            children: props.children
        },
        elementType: _Listbox.Listbox
    }) : undefined;
    [triggerSlot, listboxSlot] = (0, _useTriggerListboxSlots.useTriggerListboxSlots)(props, baseState, ref, triggerSlot, listboxSlot);
    const listboxRef = (0, _reactutilities.useMergedRefs)(listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.ref, comboboxPopupRef);
    if (listboxSlot) {
        listboxSlot.ref = listboxRef;
    }
    const rootSlot = _reactutilities.slot.always(props.root, {
        defaultProps: {
            'aria-owns': !props.inlinePopup ? listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id : undefined,
            children: props.children,
            ...rootNativeProps
        },
        elementType: 'div'
    });
    rootSlot.ref = (0, _reactutilities.useMergedRefs)(rootSlot.ref, comboboxTargetRef);
    const state = {
        components: {
            root: 'div',
            button: 'button',
            expandIcon: 'span',
            listbox: _Listbox.Listbox
        },
        root: rootSlot,
        button: triggerSlot,
        listbox: listboxSlot,
        expandIcon: _reactutilities.slot.optional(props.expandIcon, {
            renderByDefault: true,
            defaultProps: {
                children: /*#__PURE__*/ _react.createElement(_reacticons.ChevronDownRegular, null)
            },
            elementType: 'span'
        }),
        placeholderVisible: !baseState.value && !!props.placeholder,
        ...baseState
    };
    return state;
};
