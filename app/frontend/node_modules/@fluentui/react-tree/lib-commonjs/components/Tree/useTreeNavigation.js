"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTreeNavigation", {
    enumerable: true,
    get: function() {
        return useTreeNavigation;
    }
});
const _nextTypeAheadElement = require("../../utils/nextTypeAheadElement");
const _tokens = require("../../utils/tokens");
const _treeItemFilter = require("../../utils/treeItemFilter");
const _useRovingTabIndexes = require("../../hooks/useRovingTabIndexes");
function useTreeNavigation() {
    const { rove, initialize } = (0, _useRovingTabIndexes.useRovingTabIndex)(_treeItemFilter.treeItemFilter);
    const getNextElement = (data, treeItemWalker)=>{
        switch(data.type){
            case _tokens.treeDataTypes.Click:
                return data.target;
            case _tokens.treeDataTypes.TypeAhead:
                treeItemWalker.currentElement = data.target;
                return (0, _nextTypeAheadElement.nextTypeAheadElement)(treeItemWalker, data.event.key);
            case _tokens.treeDataTypes.ArrowLeft:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.parentElement();
            case _tokens.treeDataTypes.ArrowRight:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.firstChild();
            case _tokens.treeDataTypes.End:
                treeItemWalker.currentElement = treeItemWalker.root;
                return lastChildRecursive(treeItemWalker);
            case _tokens.treeDataTypes.Home:
                treeItemWalker.currentElement = treeItemWalker.root;
                return treeItemWalker.firstChild();
            case _tokens.treeDataTypes.ArrowDown:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.nextElement();
            case _tokens.treeDataTypes.ArrowUp:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.previousElement();
        }
    };
    function navigate(data, walker) {
        const nextElement = getNextElement(data, walker);
        if (nextElement) {
            rove(nextElement);
        }
    }
    return {
        navigate,
        initialize
    };
}
function lastChildRecursive(walker) {
    let lastElement = null;
    let nextElement = null;
    while(nextElement = walker.lastChild()){
        lastElement = nextElement;
    }
    return lastElement;
}
