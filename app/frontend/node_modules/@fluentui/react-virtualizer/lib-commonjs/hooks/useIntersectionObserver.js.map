{"version":3,"sources":["useIntersectionObserver.js"],"sourcesContent":["import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\nconst { useState, useRef } = React;\n/**\n * React hook that allows easy usage of the browser API IntersectionObserver within React\n * @param callback - A function called when the percentage of the target element is visible crosses a threshold.\n * @param options - An optional object which customizes the observer. If options isn't specified, the observer uses the\n * document's viewport as the root, with no margin, and a 0% threshold (meaning that even a one-pixel change is\n * enough to trigger a callback).\n * @returns An array containing a callback to update the list of Elements the observer should listen to, a callback to\n * update the init options of the IntersectionObserver and a ref to the IntersectionObserver instance itself.\n */ export const useIntersectionObserver = (callback, options)=>{\n    const observer = useRef();\n    const [observerList, setObserverList] = useState();\n    const [observerInit, setObserverInit] = useState(options);\n    // Observer elements in passed in list and clean up previous list\n    // This effect is only triggered when observerList is updated\n    useIsomorphicLayoutEffect(()=>{\n        observer.current = new IntersectionObserver(callback, observerInit);\n        // If we have an instance of IO and a list with elements, observer the elements\n        if (observer.current && observerList && observerList.length > 0) {\n            observerList.forEach((element)=>{\n                var _observer_current;\n                (_observer_current = observer.current) === null || _observer_current === void 0 ? void 0 : _observer_current.observe(element);\n            });\n        }\n        // clean up previous elements being listened to\n        return ()=>{\n            if (observer.current) {\n                observer.current.disconnect();\n            }\n        };\n    }, [\n        observerList,\n        observerInit,\n        callback\n    ]);\n    return {\n        setObserverList,\n        setObserverInit,\n        observer\n    };\n};\n"],"names":["useIntersectionObserver","useState","useRef","React","callback","options","observer","observerList","setObserverList","observerInit","setObserverInit","useIsomorphicLayoutEffect","current","IntersectionObserver","length","forEach","element","_observer_current","observe","disconnect"],"mappings":";;;;+BAWiBA;;;eAAAA;;;;iEAXM;gCACmB;AAC1C,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAE,GAAGC;AASlB,MAAMH,0BAA0B,CAACI,UAAUC;IAClD,MAAMC,WAAWJ;IACjB,MAAM,CAACK,cAAcC,gBAAgB,GAAGP;IACxC,MAAM,CAACQ,cAAcC,gBAAgB,GAAGT,SAASI;IACjD,iEAAiE;IACjE,6DAA6D;IAC7DM,IAAAA,yCAAyB,EAAC;QACtBL,SAASM,OAAO,GAAG,IAAIC,qBAAqBT,UAAUK;QACtD,+EAA+E;QAC/E,IAAIH,SAASM,OAAO,IAAIL,gBAAgBA,aAAaO,MAAM,GAAG,GAAG;YAC7DP,aAAaQ,OAAO,CAAC,CAACC;gBAClB,IAAIC;gBACHA,CAAAA,oBAAoBX,SAASM,OAAO,AAAD,MAAO,QAAQK,sBAAsB,KAAK,IAAI,KAAK,IAAIA,kBAAkBC,OAAO,CAACF;YACzH;QACJ;QACA,+CAA+C;QAC/C,OAAO;YACH,IAAIV,SAASM,OAAO,EAAE;gBAClBN,SAASM,OAAO,CAACO,UAAU;YAC/B;QACJ;IACJ,GAAG;QACCZ;QACAE;QACAL;KACH;IACD,OAAO;QACHI;QACAE;QACAJ;IACJ;AACJ"}