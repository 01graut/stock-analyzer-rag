{"version":3,"file":"scroll.js","sourceRoot":"../src/","sources":["components/Sticky/util/scroll.ts"],"names":[],"mappings":";;;;IAMO,IAAM,cAAc,GAAsB;QAC/C,IAAM,iBAAiB,GAAG,IAAI,GAAG,EAAuB,CAAC;QAEzD,IAAM,mBAAmB,GAAwB,UAAC,EAAE,EAAE,KAAK;;YACzD,IAAM,gBAAgB,GAAG,EAAE,CAAC,SAAS,CAAC;YACtC,IAAM,aAAa,GAAG,MAAA,iBAAiB,CAAC,GAAG,CAAC,EAAE,CAAC,mCAAI,GAAG,CAAC;YAEvD,IAAI,aAAa,GAAG,KAAK,IAAI,gBAAgB,IAAI,aAAa,GAAG,KAAK,IAAI,gBAAgB,EAAE;gBAC1F,OAAO,aAAa,CAAC;aACtB;YAED,iBAAiB,CAAC,GAAG,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;YAC5C,OAAO,gBAAgB,CAAC;QAC1B,CAAC,CAAC;QAEF,OAAO;YACL,mBAAmB,qBAAA;SACpB,CAAC;IACJ,CAAC,CAAC;IAlBW,QAAA,cAAc,kBAkBzB","sourcesContent":["export type GetScrollTopInRange = (el: HTMLElement, range: number) => number;\n\nexport type ScrollUtils = {\n  getScrollTopInRange: GetScrollTopInRange;\n};\n\nexport const getScrollUtils: () => ScrollUtils = () => {\n  const scrollTopElements = new Map<HTMLElement, number>();\n\n  const getScrollTopInRange: GetScrollTopInRange = (el, range) => {\n    const currentScrollTop = el.scrollTop;\n    const prevScrollTop = scrollTopElements.get(el) ?? NaN;\n\n    if (prevScrollTop - range <= currentScrollTop && prevScrollTop + range >= currentScrollTop) {\n      return prevScrollTop;\n    }\n\n    scrollTopElements.set(el, currentScrollTop);\n    return currentScrollTop;\n  };\n\n  return {\n    getScrollTopInRange,\n  };\n};\n"]}