{"version":3,"file":"GroupedListV2.types.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupedListV2.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IGroupedListProps } from './GroupedList.types';\nimport type { List, ScrollToMode } from '../../List';\nimport type { IGroup } from './GroupedList.types';\n\nexport interface IGroupedListV2Props extends IGroupedListProps {\n  /** Ref to the underlying List control */\n  listRef?: React.Ref<List>;\n\n  /** Ref to the underlying List control */\n  groupedListRef?: React.Ref<IGroupedListV2>;\n\n  /**\n   * For perf reasons, GroupedList avoids re-rendering unless certain props have changed.\n   * Use this prop if you need to force it to re-render in other cases. You can pass any type of\n   * value as long as it only changes (`===` comparison) when a re-render should happen.\n   */\n  version?: {};\n\n  /**\n   * For perf reasons, GroupedList avoids re-rendering unless certain props have changed.\n   * Use this prop if you need to force it to re-render when a group has expanded or collapsed.\n   * You can pass any type of value as long as it only changes (`===` comparison)\n   * when a re-render should happen.\n   */\n  groupExpandedVersion?: {};\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number, group?: IGroup) => React.ReactNode;\n}\n\nexport interface IGroupedListV2 {\n  scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;\n  getStartItemIndexInView(): number;\n}\n\n/**\n * An item rendered in a GroupedList.\n */\nexport type IItemGroupedItem = {\n  type: 'item';\n  group: IGroup;\n  item: any;\n  itemIndex: number;\n};\n\n/**\n * Item used for \"show all\" in a GroupedList.\n */\nexport type IShowAllGroupedItem = {\n  type: 'showAll';\n  group: IGroup;\n};\n\n/**\n * A footer in a GroupedList.\n */\nexport type IFooterGroupedItem = {\n  type: 'footer';\n  group: IGroup;\n};\n\n/**\n * A header in a GroupedList.\n */\nexport type IHeaderGroupedItem = {\n  type: 'header';\n  group: IGroup;\n  groupId: string;\n  groupIndex: number;\n};\n\n/**\n * Union of GroupedList item types.\n */\nexport type IGroupedItem = IItemGroupedItem | IShowAllGroupedItem | IFooterGroupedItem | IHeaderGroupedItem;\n"]}