"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useActiveDescendant", {
    enumerable: true,
    get: function() {
        return useActiveDescendant;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _useOptionWalker = require("./useOptionWalker");
const _constants = require("./constants");
function useActiveDescendant(options) {
    const { imperativeRef, matchOption } = options;
    const activeParentRef = _react.useRef(null);
    const { listboxRef, optionWalker } = (0, _useOptionWalker.useOptionWalker)({
        matchOption
    });
    const getActiveDescendant = ()=>{
        var _listboxRef_current;
        return (_listboxRef_current = listboxRef.current) === null || _listboxRef_current === void 0 ? void 0 : _listboxRef_current.querySelector(`[${_constants.ACTIVEDESCENDANT_ATTRIBUTE}]`);
    };
    const setActiveDescendant = (nextActive)=>{
        const active = getActiveDescendant();
        if (active) {
            active.removeAttribute(_constants.ACTIVEDESCENDANT_ATTRIBUTE);
        }
        if (nextActive) {
            var _activeParentRef_current;
            nextActive.setAttribute(_constants.ACTIVEDESCENDANT_ATTRIBUTE, '');
            (_activeParentRef_current = activeParentRef.current) === null || _activeParentRef_current === void 0 ? void 0 : _activeParentRef_current.setAttribute('aria-activedescendant', nextActive.id);
        } else {
            var _activeParentRef_current1;
            (_activeParentRef_current1 = activeParentRef.current) === null || _activeParentRef_current1 === void 0 ? void 0 : _activeParentRef_current1.removeAttribute('aria-activedescendant');
        }
    };
    _react.useImperativeHandle(imperativeRef, ()=>({
            first: ()=>{
                if (!listboxRef.current || !activeParentRef.current) {
                    return;
                }
                const first = optionWalker.first();
                if (first) {
                    setActiveDescendant(first);
                }
            },
            next: ()=>{
                if (!listboxRef.current || !activeParentRef.current) {
                    return;
                }
                const active = getActiveDescendant();
                if (!active) {
                    return;
                }
                optionWalker.setCurrent(active);
                const next = optionWalker.next();
                if (next) {
                    setActiveDescendant(next);
                }
            },
            prev: ()=>{
                if (!listboxRef.current || !activeParentRef.current) {
                    return;
                }
                const active = getActiveDescendant();
                if (!active) {
                    return;
                }
                optionWalker.setCurrent(active);
                const next = optionWalker.prev();
                if (next && next !== listboxRef.current) {
                    setActiveDescendant(next);
                }
            },
            blur: ()=>{
                if (!listboxRef.current || !activeParentRef.current) {
                    return;
                }
                setActiveDescendant(undefined);
            },
            active: ()=>{
                if (listboxRef.current) {
                    var _getActiveDescendant;
                    return (_getActiveDescendant = getActiveDescendant()) === null || _getActiveDescendant === void 0 ? void 0 : _getActiveDescendant.id;
                }
            },
            focus: (id)=>{
                if (!listboxRef.current) {
                    return;
                }
                optionWalker.setCurrent(listboxRef.current);
                let cur = optionWalker.next();
                while(cur && cur.id !== id){
                    cur = optionWalker.next();
                }
                if (cur) {
                    setActiveDescendant(cur);
                }
            }
        }));
    return {
        listboxRef,
        activeParentRef
    };
}
