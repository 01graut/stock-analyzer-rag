{"version":3,"sources":["useOptionWalker.js"],"sourcesContent":["import * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { isHTMLElement, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\nexport function useOptionWalker(options) {\n    const { matchOption } = options;\n    const { targetDocument } = useFluent();\n    const treeWalkerRef = React.useRef(null);\n    const listboxRef = React.useRef(null);\n    const optionFilter = React.useCallback((node)=>{\n        if (isHTMLElement(node) && matchOption(node)) {\n            return NodeFilter.FILTER_ACCEPT;\n        }\n        return NodeFilter.FILTER_SKIP;\n    }, [\n        matchOption\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        if (!targetDocument || !listboxRef.current) {\n            return;\n        }\n        treeWalkerRef.current = targetDocument.createTreeWalker(listboxRef.current, NodeFilter.SHOW_ELEMENT, optionFilter);\n    }, [\n        targetDocument,\n        optionFilter\n    ]);\n    const optionWalker = React.useMemo(()=>({\n            first: ()=>{\n                if (!treeWalkerRef.current) {\n                    return null;\n                }\n                return treeWalkerRef.current.firstChild();\n            },\n            next: ()=>{\n                if (!treeWalkerRef.current) {\n                    return null;\n                }\n                return treeWalkerRef.current.nextNode();\n            },\n            prev: ()=>{\n                if (!treeWalkerRef.current) {\n                    return null;\n                }\n                return treeWalkerRef.current.previousNode();\n            },\n            setCurrent: (el)=>{\n                if (!treeWalkerRef.current) {\n                    return;\n                }\n                treeWalkerRef.current.currentNode = el;\n            }\n        }), []);\n    return {\n        optionWalker,\n        listboxRef\n    };\n}\n"],"names":["useOptionWalker","options","matchOption","targetDocument","useFluent","treeWalkerRef","React","useRef","listboxRef","optionFilter","useCallback","node","isHTMLElement","NodeFilter","FILTER_ACCEPT","FILTER_SKIP","useIsomorphicLayoutEffect","current","createTreeWalker","SHOW_ELEMENT","optionWalker","useMemo","first","firstChild","next","nextNode","prev","previousNode","setCurrent","el","currentNode"],"mappings":";;;;+BAGgBA;;;eAAAA;;;;iEAHO;qCACyB;gCACS;AAClD,SAASA,gBAAgBC,OAAO;IACnC,MAAM,EAAEC,WAAW,EAAE,GAAGD;IACxB,MAAM,EAAEE,cAAc,EAAE,GAAGC,IAAAA,uCAAS;IACpC,MAAMC,gBAAgBC,OAAMC,MAAM,CAAC;IACnC,MAAMC,aAAaF,OAAMC,MAAM,CAAC;IAChC,MAAME,eAAeH,OAAMI,WAAW,CAAC,CAACC;QACpC,IAAIC,IAAAA,6BAAa,EAACD,SAAST,YAAYS,OAAO;YAC1C,OAAOE,WAAWC,aAAa;QACnC;QACA,OAAOD,WAAWE,WAAW;IACjC,GAAG;QACCb;KACH;IACDc,IAAAA,yCAAyB,EAAC;QACtB,IAAI,CAACb,kBAAkB,CAACK,WAAWS,OAAO,EAAE;YACxC;QACJ;QACAZ,cAAcY,OAAO,GAAGd,eAAee,gBAAgB,CAACV,WAAWS,OAAO,EAAEJ,WAAWM,YAAY,EAAEV;IACzG,GAAG;QACCN;QACAM;KACH;IACD,MAAMW,eAAed,OAAMe,OAAO,CAAC,IAAK,CAAA;YAChCC,OAAO;gBACH,IAAI,CAACjB,cAAcY,OAAO,EAAE;oBACxB,OAAO;gBACX;gBACA,OAAOZ,cAAcY,OAAO,CAACM,UAAU;YAC3C;YACAC,MAAM;gBACF,IAAI,CAACnB,cAAcY,OAAO,EAAE;oBACxB,OAAO;gBACX;gBACA,OAAOZ,cAAcY,OAAO,CAACQ,QAAQ;YACzC;YACAC,MAAM;gBACF,IAAI,CAACrB,cAAcY,OAAO,EAAE;oBACxB,OAAO;gBACX;gBACA,OAAOZ,cAAcY,OAAO,CAACU,YAAY;YAC7C;YACAC,YAAY,CAACC;gBACT,IAAI,CAACxB,cAAcY,OAAO,EAAE;oBACxB;gBACJ;gBACAZ,cAAcY,OAAO,CAACa,WAAW,GAAGD;YACxC;QACJ,CAAA,GAAI,EAAE;IACV,OAAO;QACHT;QACAZ;IACJ;AACJ"}