{"version":3,"file":"Ask-f3e41960.js","sources":["../../../frontend/src/pages/ask/Ask.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { Checkbox, Panel, DefaultButton, Spinner, TextField, SpinButton, IDropdownOption, Dropdown } from \"@fluentui/react\";\n\nimport styles from \"./Ask.module.css\";\n\nimport { askApi, configApi, ChatAppResponse, ChatAppRequest, RetrievalMode, VectorFieldOptions, GPT4VInput } from \"../../api\";\nimport { Answer, AnswerError } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\nimport { VectorSettings } from \"../../components/VectorSettings\";\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\n\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\n\nexport function Component(): JSX.Element {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [question, setQuestion] = useState<string>(\"\");\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding]);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n    const [answer, setAnswer] = useState<ChatAppResponse>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    const getConfig = async () => {\n        const token = client ? await getToken(client) : undefined;\n\n        configApi(token).then(config => {\n            setShowGPT4VOptions(config.showGPT4VOptions);\n            setUseSemanticRanker(config.showSemanticRankerOption);\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\n            setShowVectorOption(config.showVectorOption);\n            if (!config.showVectorOption) {\n                setRetrievalMode(RetrievalMode.Text);\n            }\n        });\n    };\n\n    useEffect(() => {\n        getConfig();\n    }, []);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const request: ChatAppRequest = {\n                messages: [\n                    {\n                        content: question,\n                        role: \"user\"\n                    }\n                ],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFieldList,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput\n                    }\n                },\n                // ChatAppProtocol: Client must pass on any session state received from the server\n                session_state: answer ? answer.choices[0].session_state : null\n            };\n            const result = await askApi(request, token);\n            setAnswer(result);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplatePrefix(newValue || \"\");\n    };\n\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplateSuffix(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n        setQuestion(example);\n    };\n\n    const onShowCitation = (citation: string) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\n        if (activeAnalysisPanelTab === tab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    return (\n        <div className={styles.askContainer}>\n            <div className={styles.askTopSection}>\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n                <h1 className={styles.askTitle}>Ask your data</h1>\n                <div className={styles.askQuestionInput}>\n                    <QuestionInput\n                        placeholder=\"Example: Does my plan cover annual eye exams?\"\n                        disabled={isLoading}\n                        initQuestion={question}\n                        onSend={question => makeApiRequest(question)}\n                    />\n                </div>\n            </div>\n            <div className={styles.askBottomSection}>\n                {isLoading && <Spinner label=\"Generating answer\" />}\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />}\n                {!isLoading && answer && !error && (\n                    <div className={styles.askAnswerContainer}>\n                        <Answer\n                            answer={answer}\n                            isStreaming={false}\n                            onCitationClicked={x => onShowCitation(x)}\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\n                        />\n                    </div>\n                )}\n                {error ? (\n                    <div className={styles.askAnswerContainer}>\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                    </div>\n                ) : null}\n                {activeAnalysisPanelTab && answer && (\n                    <AnalysisPanel\n                        className={styles.askAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x)}\n                        citationHeight=\"600px\"\n                        answer={answer}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n            </div>\n\n            <Panel\n                headerText=\"Configure answer generation\"\n                isOpen={isConfigPanelOpen}\n                isBlocking={false}\n                onDismiss={() => setIsConfigPanelOpen(false)}\n                closeButtonAriaLabel=\"Close\"\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                isFooterAtBottom={true}\n            >\n                <TextField\n                    className={styles.askSettingsSeparator}\n                    defaultValue={promptTemplate}\n                    label=\"Override prompt template\"\n                    multiline\n                    autoAdjustHeight\n                    onChange={onPromptTemplateChange}\n                />\n                <SpinButton\n                    className={styles.askSettingsSeparator}\n                    label=\"Retrieve this many search results:\"\n                    min={1}\n                    max={50}\n                    defaultValue={retrieveCount.toString()}\n                    onChange={onRetrieveCountChange}\n                />\n                <TextField className={styles.askSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\n\n                {showSemanticRankerOption && (\n                    <Checkbox\n                        className={styles.askSettingsSeparator}\n                        checked={useSemanticRanker}\n                        label=\"Use semantic ranker for retrieval\"\n                        onChange={onUseSemanticRankerChange}\n                    />\n                )}\n\n                <Checkbox\n                    className={styles.askSettingsSeparator}\n                    checked={useSemanticCaptions}\n                    label=\"Use query-contextual summaries instead of whole documents\"\n                    onChange={onUseSemanticCaptionsChange}\n                    disabled={!useSemanticRanker}\n                />\n\n                {showGPT4VOptions && (\n                    <GPT4VSettings\n                        gpt4vInputs={gpt4vInput}\n                        isUseGPT4V={useGPT4V}\n                        updateUseGPT4V={useGPT4V => {\n                            setUseGPT4V(useGPT4V);\n                        }}\n                        updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\n                    />\n                )}\n\n                {showVectorOption && (\n                    <VectorSettings\n                        showImageOptions={useGPT4V && showGPT4VOptions}\n                        updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\n                        updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\n                    />\n                )}\n\n                {useLogin && (\n                    <Checkbox\n                        className={styles.askSettingsSeparator}\n                        checked={useOidSecurityFilter || requireAccessControl}\n                        label=\"Use oid security filter\"\n                        disabled={!isLoggedIn(client) || requireAccessControl}\n                        onChange={onUseOidSecurityFilterChange}\n                    />\n                )}\n                {useLogin && (\n                    <Checkbox\n                        className={styles.askSettingsSeparator}\n                        checked={useGroupsSecurityFilter || requireAccessControl}\n                        label=\"Use groups security filter\"\n                        disabled={!isLoggedIn(client) || requireAccessControl}\n                        onChange={onUseGroupsSecurityFilterChange}\n                    />\n                )}\n                {useLogin && <TokenClaimsDisplay />}\n            </Panel>\n        </div>\n    );\n}\n\nComponent.displayName = \"Ask\";\n"],"names":["Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","useGPT4V","setUseGPT4V","gpt4vInput","setGPT4VInput","GPT4VInput","excludeCategory","setExcludeCategory","question","setQuestion","vectorFieldList","setVectorFieldList","VectorFieldOptions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showVectorOption","setShowVectorOption","lastQuestionRef","useRef","isLoading","setIsLoading","error","setError","answer","setAnswer","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","client","useLogin","useMsal","getConfig","token","getToken","configApi","config","useEffect","makeApiRequest","request","result","askApi","e","onPromptTemplateChange","_ev","newValue","onRetrieveCountChange","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","jsxs","styles","jsx","SettingsButton","QuestionInput","Spinner","ExampleList","Answer","x","AnswerError","AnalysisPanel","Panel","DefaultButton","TextField","SpinButton","Checkbox","GPT4VSettings","inputs","VectorSettings","options","requireAccessControl","isLoggedIn","TokenClaimsDisplay"],"mappings":"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"}