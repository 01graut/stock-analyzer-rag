{"version":3,"mappings":"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","names":["appServicesAuthTokenUrl","appServicesAuthTokenRefreshUrl","appServicesAuthLogoutUrl","fetchAuthSetup","response","authSetup","useLogin","requireAccessControl","msalConfig","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","r","json","acc","item","appServicesToken","appServicesLogout","isLoggedIn","client","getToken","error","github","LoginButton","instance","useMsal","activeAccount","handleLoginPopup","handleLogoutPopup","logoutText","jsx","DefaultButton","styles","Layout","jsxs","Link","NavLink","isActive","Outlet","wallstreet","BACKEND_URI","getHeaders","idToken","headers","askApi","request","parsedResponse","configApi","chatApi","getCitationFilePath","citation","RetrievalMode","GPT4VInput","VectorFieldOptions","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","question","setQuestion","useState","useEffect","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","TextField","Tooltip","Button","Send28Filled","Example","text","value","onClick","DEFAULT_EXAMPLES","GPT4V_EXAMPLES","ExampleList","onExampleClicked","useGPT4V","UserChatMessage","message","parseSupportingContentItem","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","parsed","TextSupportingContent","AnalysisPanelTabs","ThoughtProcess","thoughts","t","SyntaxHighlighter","Fragment","k","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","setCitation","fetchCitation","token","citationContent","citationObjectUrl","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","vectorFields","VectorSettings","updateRetrievalMode","updateVectorFields","showImageOptions","retrievalMode","setRetrievalMode","vectorFieldOption","setVectorFieldOption","onRetrievalModeChange","option","onVectorFieldsChange","list","Dropdown","ChoiceGroup","TokenClaimsDisplay","ToString","a","items","o","key","originalKey","columns","createTableColumn","b","Label","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","GPT4VSettings","updateGPT4VInputs","updateUseGPT4V","isUseGPT4V","gpt4vInputs","setUseGPT4V","onuseGPT4V","checked","onSetGPT4VInput","data","Checkbox","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","vectorFieldList","setVectorFieldList","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","gpt4vInput","setGPT4VInput","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setIsStreaming","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showVectorOption","setShowVectorOption","getConfig","config","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","event","readNDJSONStream","makeApiRequest","e","clearChat","onPromptTemplateChange","onRetrieveCountChange","onUseSemanticRankerChange","onUseSemanticCaptionsChange","onShouldStreamChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","example","onShowCitation","onToggleTab","tab","streamedAnswer","c","q","Panel","SpinButton","inputs","options","layout","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/authConfig.ts","../../../frontend/src/assets/github.svg","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/assets/wallstreet-unsplash.jpeg","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/components/GPT4VSettings/GPT4VSettings.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\n\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\n\nconst appServicesAuthTokenUrl = \".auth/me\";\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\n\ninterface AppServicesToken {\n    id_token: string;\n    access_token: string;\n    user_claims: Record<string, any>;\n}\n\ninterface AuthSetup {\n    // Set to true if login elements should be shown in the UI\n    useLogin: boolean;\n    // Set to true if access control is enforced by the application\n    requireAccessControl: boolean;\n    /**\n     * Configuration object to be passed to MSAL instance on creation.\n     * For a full list of MSAL.js configuration parameters, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n     */\n    msalConfig: {\n        auth: {\n            clientId: string; // Client app id used for login\n            authority: string; // Directory to use for login https://learn.microsoft.com/azure/active-directory/develop/msal-client-application-configuration#authority\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\n        };\n        cache: {\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\n        };\n    };\n    loginRequest: {\n        /**\n         * Scopes you add here will be prompted for user consent during sign-in.\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n         * For more information about OIDC scopes, visit:\n         * https://docs.microsoft.com/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n         */\n        scopes: Array<string>;\n    };\n    tokenRequest: {\n        scopes: Array<string>;\n    };\n}\n\n// Fetch the auth setup JSON data from the API if not already cached\nasync function fetchAuthSetup(): Promise<AuthSetup> {\n    const response = await fetch(\"/auth_setup\");\n    if (!response.ok) {\n        throw new Error(`auth setup response was not ok: ${response.status}`);\n    }\n    return await response.json();\n}\n\nconst authSetup = await fetchAuthSetup();\n\nexport const useLogin = authSetup.useLogin;\n\nexport const requireAccessControl = authSetup.requireAccessControl;\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = authSetup.msalConfig;\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\nexport const loginRequest = authSetup.loginRequest;\n\nconst tokenRequest = authSetup.tokenRequest;\n\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\nexport const getRedirectUri = () => {\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\n};\n\n// Get an access token if a user logged in using app services authentication\n// Returns null if the app doesn't support app services authentication\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\n    return fetch(appServicesAuthTokenRefreshUrl).then(r => {\n        if (r.ok) {\n            return fetch(appServicesAuthTokenUrl).then(r => {\n                if (r.ok) {\n                    return r.json().then(json => {\n                        if (json.length > 0) {\n                            return {\n                                id_token: json[0][\"id_token\"] as string,\n                                access_token: json[0][\"access_token\"] as string,\n                                user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\n                                    acc[item.typ] = item.val;\n                                    return acc;\n                                }, {}) as Record<string, any>\n                            };\n                        }\n\n                        return null;\n                    });\n                }\n\n                return null;\n            });\n        }\n\n        return null;\n    });\n};\n\nexport const appServicesToken = await getAppServicesToken();\n\n// Sign out of app services\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\nexport const appServicesLogout = () => {\n    window.location.href = appServicesAuthLogoutUrl;\n};\n\n// Determine if the user is logged in\n// The user may have logged in either using the app services login or the on-page login\nexport const isLoggedIn = (client: IPublicClientApplication | undefined): boolean => {\n    return client?.getActiveAccount() != null || appServicesToken != null;\n};\n\n// Get an access token for use with the API server.\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\n// Use the access token from app services login if available\nexport const getToken = (client: IPublicClientApplication): Promise<string | undefined> => {\n    if (appServicesToken) {\n        return Promise.resolve(appServicesToken.access_token);\n    }\n\n    return client\n        .acquireTokenSilent({\n            ...tokenRequest,\n            redirectUri: getRedirectUri()\n        })\n        .then(r => r.accessToken)\n        .catch(error => {\n            console.log(error);\n            return undefined;\n        });\n};\n","export default \"__VITE_ASSET__4e6ad5ae__\"","import { DefaultButton } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\n\nimport styles from \"./LoginButton.module.css\";\nimport { getRedirectUri, loginRequest } from \"../../authConfig\";\nimport { appServicesToken, appServicesLogout } from \"../../authConfig\";\n\nexport const LoginButton = () => {\n    const { instance } = useMsal();\n    const activeAccount = instance.getActiveAccount();\n    const isLoggedIn = (activeAccount || appServicesToken) != null;\n\n    const handleLoginPopup = () => {\n        /**\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\n         */\n        instance\n            .loginPopup({\n                ...loginRequest,\n                redirectUri: getRedirectUri()\n            })\n            .catch(error => console.log(error));\n    };\n    const handleLogoutPopup = () => {\n        if (activeAccount) {\n            instance\n                .logoutPopup({\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\n                    account: instance.getActiveAccount()\n                })\n                .catch(error => console.log(error));\n        } else {\n            appServicesLogout();\n        }\n    };\n    const logoutText = `Logout\\n${activeAccount?.username ?? appServicesToken?.user_claims?.preferred_username}`;\n    return (\n        <DefaultButton\n            text={isLoggedIn ? logoutText : \"Login\"}\n            className={styles.loginButton}\n            onClick={isLoggedIn ? handleLogoutPopup : handleLoginPopup}\n        ></DefaultButton>\n    );\n};\n","import { Outlet, NavLink, Link } from \"react-router-dom\";\n\nimport github from \"../../assets/github.svg\";\n\nimport styles from \"./Layout.module.css\";\n\nimport { useLogin } from \"../../authConfig\";\n\nimport { LoginButton } from \"../../components/LoginButton\";\n\nconst Layout = () => {\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>StockGPT | Your Stock Analyst</h3>\n                    </Link>\n                    <nav>\n                        <ul className={styles.headerNavList}>\n                            <li>\n                                <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Chat\n                                </NavLink>\n                            </li>\n                            <li className={styles.headerNavLeftMargin}>\n                                <NavLink to=\"/qa\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Ask a Stock Question\n                                </NavLink>\n                            </li>\n                            <li className={styles.headerNavLeftMargin}>\n                                <a href=\"https://aka.ms/entgptsearch\" target={\"_blank\"} title=\"Github repository link\">\n                                    <img\n                                        src={github}\n                                        alt=\"Github logo\"\n                                        aria-label=\"Link to github repository\"\n                                        width=\"20px\"\n                                        height=\"20px\"\n                                        className={styles.githubLogo}\n                                    />\n                                </a>\n                            </li>\n                        </ul>\n                    </nav>\n                    <h4 className={styles.headerRightText}>Azure OpenAI + AI Search</h4>\n                    {useLogin && <LoginButton />}\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","export default \"__VITE_ASSET__5699bee4__\"","const BACKEND_URI = \"\";\n\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config } from \"./models\";\nimport { useLogin, appServicesToken } from \"../authConfig\";\n\nexport function getHeaders(idToken: string | undefined): Record<string, string> {\n    var headers: Record<string, string> = {\n        \"Content-Type\": \"application/json\"\n    };\n    // If using login and not using app services, add the id token of the logged in account as the authorization\n    if (useLogin && appServicesToken == null) {\n        if (idToken) {\n            headers[\"Authorization\"] = `Bearer ${idToken}`;\n        }\n    }\n\n    return headers;\n}\n\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\n    const response = await fetch(`${BACKEND_URI}/ask`, {\n        method: \"POST\",\n        headers: getHeaders(idToken),\n        body: JSON.stringify(request)\n    });\n\n    const parsedResponse: ChatAppResponseOrError = await response.json();\n    if (response.status > 299 || !response.ok) {\n        throw Error(parsedResponse.error || \"Unknown error\");\n    }\n\n    return parsedResponse as ChatAppResponse;\n}\n\nexport async function configApi(idToken: string | undefined): Promise<Config> {\n    const response = await fetch(`${BACKEND_URI}/config`, {\n        method: \"GET\",\n        headers: getHeaders(idToken)\n    });\n\n    return (await response.json()) as Config;\n}\n\nexport async function chatApi(request: ChatAppRequest, idToken: string | undefined): Promise<Response> {\n    return await fetch(`${BACKEND_URI}/chat`, {\n        method: \"POST\",\n        headers: getHeaders(idToken),\n        body: JSON.stringify(request)\n    });\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport const enum GPT4VInput {\n    TextAndImages = \"textAndImages\",\n    Images = \"images\",\n    Texts = \"texts\"\n}\n\nexport const enum VectorFieldOptions {\n    Embedding = \"embedding\",\n    ImageEmbedding = \"imageEmbedding\",\n    Both = \"both\"\n}\n\nexport type ChatAppRequestOverrides = {\n    retrieval_mode?: RetrievalMode;\n    semantic_ranker?: boolean;\n    semantic_captions?: boolean;\n    exclude_category?: string;\n    top?: number;\n    temperature?: number;\n    prompt_template?: string;\n    prompt_template_prefix?: string;\n    prompt_template_suffix?: string;\n    suggest_followup_questions?: boolean;\n    use_oid_security_filter?: boolean;\n    use_groups_security_filter?: boolean;\n    use_gpt4v?: boolean;\n    gpt4v_input?: GPT4VInput;\n    vector_fields: VectorFieldOptions[];\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n};\n\nexport type Thoughts = {\n    title: string;\n    description: any; // It can be any output from the api\n    props?: { [key: string]: string };\n};\n\nexport type ResponseContext = {\n    data_points: string[];\n    followup_questions: string[] | null;\n    thoughts: Thoughts[];\n};\n\nexport type ResponseChoice = {\n    index: number;\n    message: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n};\n\nexport type ChatAppResponseOrError = {\n    choices?: ResponseChoice[];\n    error?: string;\n};\n\nexport type ChatAppResponse = {\n    choices: ResponseChoice[];\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n};\n\nexport type ChatAppRequest = {\n    messages: ResponseMessage[];\n    context?: ChatAppRequestContext;\n    stream?: boolean;\n    session_state: any;\n};\n\nexport type Config = {\n    showGPT4VOptions: boolean;\n    showSemanticRankerOption: boolean;\n    showVectorOption: boolean;\n};\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: ChatAppResponse;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions\n}: Props) => {\n    const followupQuestions = answer.choices[0].context.followup_questions;\n    const messageContent = answer.choices[0].message.content;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\n\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title=\"Show thought process\"\n                            ariaLabel=\"Show thought process\"\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.choices[0].context.thoughts?.length}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title=\"Show supporting content\"\n                            ariaLabel=\"Show supporting content\"\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.choices[0].context.data_points}\n                        />\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>Citations:</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            const path = getCitationFilePath(x);\n                            return (\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        Generating answer\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip, Field, Textarea } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\nimport { isLoggedIn, requireAccessControl } from \"../../authConfig\";\n\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    initQuestion?: string;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    useEffect(() => {\n        initQuestion && setQuestion(initQuestion);\n    }, [initQuestion]);\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const { instance } = useMsal();\n    const disableRequiredAccessControl = requireAccessControl && !isLoggedIn(instance);\n    const sendQuestionDisabled = disabled || !question.trim() || disableRequiredAccessControl;\n\n    if (disableRequiredAccessControl) {\n        placeholder = \"Please login to continue...\";\n    }\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                disabled={disableRequiredAccessControl}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nconst DEFAULT_EXAMPLES: string[] = [\n    \"How would a specific change in market conditions (e.g., interest rate hike) impact ratings of my holdings?\",\n    \"What is the overall risk profile of my portfolio based on the RAG ratings of individual stocks?\",\n    \"Which stocks have received downgrades from analysts or experienced negative changes in their news sentiment?\"\n];\n\nconst GPT4V_EXAMPLES: string[] = [\n    \"Compare the impact of interest rates and GDP in financial markets.\",\n    \"What is the expected trend for the S&P 500 index over the next five years? Compare it to the past S&P 500 performance\",\n    \"Can you identify any correlation between oil prices and stock market trends?\"\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n    useGPT4V?: boolean;\n}\n\nexport const ExampleList = ({ onExampleClicked, useGPT4V }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {(useGPT4V ? GPT4V_EXAMPLES : DEFAULT_EXAMPLES).map((question, i) => (\n                <li key={i}>\n                    <Example text={question} value={question} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","import DOMPurify from \"dompurify\";\n\ntype ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\n\n    return {\n        title,\n        content\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[] | { text: string[]; images?: { url: string }[] };\n}\n\ninterface SupportingItemProps {\n    title: string;\n    content: string;\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\n    return (\n        <ul className={styles.supportingContentNavList}>\n            {textItems.map(c => {\n                const parsed = parseSupportingContentItem(c);\n                return <TextSupportingContent {...parsed} />;\n            })}\n            {imageItems?.map(i => {\n                return <img className={styles.supportingContentItemImage} src={i.url} />;\n            })}\n        </ul>\n    );\n};\n\nexport const TextSupportingContent = ({ title, content }: SupportingItemProps) => {\n    return (\n        <li className={styles.supportingContentItem}>\n            <h4 className={styles.supportingContentItemHeader}>{title}</h4>\n            <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: content }} />\n        </li>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Stack } from \"@fluentui/react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { Thoughts } from \"../../api\";\n\ninterface Props {\n    thoughts: Thoughts[];\n}\n\nexport const ThoughtProcess = ({ thoughts }: Props) => {\n    return (\n        <ul className={styles.tList}>\n            {thoughts.map(t => {\n                return (\n                    <li className={styles.tListItem}>\n                        <div className={styles.tStep}>{t.title}</div>\n                        {Array.isArray(t.description) ? (\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock}>\n                                {JSON.stringify(t.description, null, 2)}\n                            </SyntaxHighlighter>\n                        ) : (\n                            <>\n                                <div>{t.description}</div>\n                                <Stack horizontal tokens={{ childrenGap: 5 }}>\n                                    {t.props &&\n                                        (Object.keys(t.props) || []).map((k: any) => (\n                                            <span className={styles.tProp}>\n                                                {k}: {JSON.stringify(t.props?.[k])}\n                                            </span>\n                                        ))}\n                                </Stack>\n                            </>\n                        )}\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { ChatAppResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\nimport { ThoughtProcess } from \"./ThoughtProcess\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { getHeaders } from \"../../api\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport { useState, useEffect } from \"react\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: ChatAppResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.choices[0].context.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.choices[0].context.data_points;\n    const isDisabledCitationTab: boolean = !activeCitation;\n    const [citation, setCitation] = useState(\"\");\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    const fetchCitation = async () => {\n        const token = client ? await getToken(client) : undefined;\n        if (activeCitation) {\n            const response = await fetch(activeCitation, {\n                method: \"GET\",\n                headers: getHeaders(token)\n            });\n            const citationContent = await response.blob();\n            const citationObjectUrl = URL.createObjectURL(citationContent);\n            setCitation(citationObjectUrl);\n        }\n    };\n    useEffect(() => {\n        fetchCitation();\n    }, []);\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText=\"Thought process\"\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <ThoughtProcess thoughts={answer.choices[0].context.thoughts || []} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText=\"Supporting content\"\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.choices[0].context.data_points} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText=\"Citation\"\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                {activeCitation?.endsWith(\".png\") ? (\n                    <img src={citation} className={styles.citationImg} />\n                ) : (\n                    <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />\n                )}\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Settings24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Settings24Regular />} onClick={onClick}>\n                {\"Developer settings\"}\n            </Button>\n        </div>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {\"Clear chat\"}\n            </Button>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { ChoiceGroup, IChoiceGroupOption, Stack, IDropdownOption, Dropdown } from \"@fluentui/react\";\n\nimport styles from \"./VectorSettings.module.css\";\nimport { RetrievalMode, VectorFieldOptions } from \"../../api\";\n\ninterface Props {\n    showImageOptions?: boolean;\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\n    updateVectorFields: (options: VectorFieldOptions[]) => void;\n}\n\nconst vectorFields: IChoiceGroupOption[] = [\n    {\n        key: VectorFieldOptions.Embedding,\n        text: \"Text Embeddings\"\n    },\n    {\n        key: VectorFieldOptions.ImageEmbedding,\n        text: \"Image Embeddings\"\n    },\n    {\n        key: VectorFieldOptions.Both,\n        text: \"Text and Image embeddings\"\n    }\n];\n\nexport const VectorSettings = ({ updateRetrievalMode, updateVectorFields, showImageOptions }: Props) => {\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [vectorFieldOption, setVectorFieldOption] = useState<string>();\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onVectorFieldsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\n        option && setVectorFieldOption(option.key);\n        let list;\n        if (option?.key === \"both\") {\n            list = [VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding];\n        } else {\n            list = [option?.key as VectorFieldOptions];\n        }\n        updateVectorFields(list);\n    };\n\n    useEffect(() => {\n        showImageOptions\n            ? updateVectorFields([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding])\n            : updateVectorFields([VectorFieldOptions.Embedding]);\n    }, [showImageOptions]);\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Dropdown\n                label=\"Retrieval mode\"\n                options={[\n                    { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\n                    { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\n                    { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                ]}\n                required\n                onChange={onRetrievalModeChange}\n            />\n\n            {showImageOptions && [RetrievalMode.Vectors, RetrievalMode.Hybrid].includes(retrievalMode) && (\n                <ChoiceGroup\n                    options={vectorFields}\n                    onChange={onVectorFieldsChange}\n                    selectedKey={vectorFieldOption}\n                    defaultSelectedKey={VectorFieldOptions.Both}\n                    label=\"Vector Fields (Multi-query vector search)\"\n                />\n            )}\n        </Stack>\n    );\n};\n","import { Label } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport {\n    DataGridBody,\n    DataGridRow,\n    DataGrid,\n    DataGridHeader,\n    DataGridHeaderCell,\n    DataGridCell,\n    createTableColumn,\n    TableColumnDefinition\n} from \"@fluentui/react-table\";\nimport { appServicesToken } from \"../../authConfig\";\n\ntype Claim = {\n    name: string;\n    value: string;\n};\n\nexport const TokenClaimsDisplay = () => {\n    const { instance } = useMsal();\n    const activeAccount = instance.getActiveAccount();\n\n    const ToString = (a: string | any) => {\n        if (typeof a === \"string\") {\n            return a;\n        } else {\n            return JSON.stringify(a);\n        }\n    };\n\n    let createClaims = (o: Record<string, unknown> | undefined) => {\n        return Object.keys(o ?? {}).map((key: string) => {\n            let originalKey = key;\n            try {\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\n                const url = new URL(key);\n                const parts = url.pathname.split(\"/\");\n                key = parts[parts.length - 1];\n            } catch (error) {\n                // Do not parse key if it's not a URL\n            }\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\n        });\n    };\n    const items: Claim[] = createClaims(activeAccount?.idTokenClaims ?? appServicesToken?.user_claims);\n\n    const columns: TableColumnDefinition<Claim>[] = [\n        createTableColumn<Claim>({\n            columnId: \"name\",\n            compare: (a: Claim, b: Claim) => {\n                return a.name.localeCompare(b.name);\n            },\n            renderHeaderCell: () => {\n                return \"Name\";\n            },\n            renderCell: item => {\n                return item.name;\n            }\n        }),\n        createTableColumn<Claim>({\n            columnId: \"value\",\n            compare: (a: Claim, b: Claim) => {\n                return a.value.localeCompare(b.value);\n            },\n            renderHeaderCell: () => {\n                return \"Value\";\n            },\n            renderCell: item => {\n                return item.value;\n            }\n        })\n    ];\n\n    return (\n        <div>\n            <Label>ID Token Claims</Label>\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\n                <DataGridHeader>\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\n                </DataGridHeader>\n                <DataGridBody<Claim>>\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\n                </DataGridBody>\n            </DataGrid>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Stack, Checkbox, IDropdownOption, Dropdown } from \"@fluentui/react\";\n\nimport styles from \"./GPT4VSettings.module.css\";\nimport { GPT4VInput } from \"../../api\";\n\ninterface Props {\n    gpt4vInputs: GPT4VInput;\n    isUseGPT4V: boolean;\n    updateGPT4VInputs: (input: GPT4VInput) => void;\n    updateUseGPT4V: (useGPT4V: boolean) => void;\n}\n\nexport const GPT4VSettings = ({ updateGPT4VInputs, updateUseGPT4V, isUseGPT4V, gpt4vInputs }: Props) => {\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(isUseGPT4V);\n    const [vectorFieldOption, setVectorFieldOption] = useState<GPT4VInput>(gpt4vInputs || GPT4VInput.TextAndImages);\n\n    const onuseGPT4V = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        updateUseGPT4V(!!checked);\n        setUseGPT4V(!!checked);\n    };\n\n    const onSetGPT4VInput = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<GPT4VInput> | undefined) => {\n        if (option) {\n            const data = option.key as GPT4VInput;\n            updateGPT4VInputs(data || GPT4VInput.TextAndImages);\n            data && setVectorFieldOption(data);\n        }\n    };\n\n    useEffect(() => {\n        useGPT4V && updateGPT4VInputs(GPT4VInput.TextAndImages);\n    }, [useGPT4V]);\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Checkbox checked={useGPT4V} label=\"Use GPT-4 Turbo with Vision\" onChange={onuseGPT4V} />\n            {useGPT4V && (\n                <Dropdown\n                    selectedKey={vectorFieldOption}\n                    label=\"GPT-4 Turbo with Vision Inputs\"\n                    options={[\n                        {\n                            key: GPT4VInput.TextAndImages,\n                            text: \"Images and text from index\"\n                        },\n                        { text: \"Images only\", key: GPT4VInput.Images },\n                        { text: \"Text only\", key: GPT4VInput.Texts }\n                    ]}\n                    required\n                    onChange={onSetGPT4VInput}\n                />\n            )}\n        </Stack>\n    );\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\nimport readNDJSONStream from \"ndjson-readablestream\";\n\nimport styles from \"./Chat.module.css\";\nimport wallstreet from \"../../assets/wallstreet-unsplash.jpeg\";\n\nimport {\n    chatApi,\n    configApi,\n    RetrievalMode,\n    ChatAppResponse,\n    ChatAppResponseOrError,\n    ChatAppRequest,\n    ResponseMessage,\n    VectorFieldOptions,\n    GPT4VInput\n} from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\nimport { VectorSettings } from \"../../components/VectorSettings\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding]);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\n\n    const getConfig = async () => {\n        const token = client ? await getToken(client) : undefined;\n\n        configApi(token).then(config => {\n            setShowGPT4VOptions(config.showGPT4VOptions);\n            setUseSemanticRanker(config.showSemanticRankerOption);\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\n            setShowVectorOption(config.showVectorOption);\n            if (!config.showVectorOption) {\n                setRetrievalMode(RetrievalMode.Text);\n            }\n        });\n    };\n\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], setAnswers: Function, responseBody: ReadableStream<any>) => {\n        let answer: string = \"\";\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\n\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    const latestResponse: ChatAppResponse = {\n                        ...askResponse,\n                        choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\n                    };\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(true);\n            for await (const event of readNDJSONStream(responseBody)) {\n                if (event[\"choices\"] && event[\"choices\"][0][\"context\"] && event[\"choices\"][0][\"context\"][\"data_points\"]) {\n                    event[\"choices\"][0][\"message\"] = event[\"choices\"][0][\"delta\"];\n                    askResponse = event as ChatAppResponse;\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"delta\"][\"content\"]) {\n                    setIsLoading(false);\n                    await updateState(event[\"choices\"][0][\"delta\"][\"content\"]);\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"context\"]) {\n                    // Update context with new keys from latest event\n                    askResponse.choices[0].context = { ...askResponse.choices[0].context, ...event[\"choices\"][0][\"context\"] };\n                } else if (event[\"error\"]) {\n                    throw Error(event[\"error\"]);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        const fullResponse: ChatAppResponse = {\n            ...askResponse,\n            choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\n        };\n        return fullResponse;\n    };\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const messages: ResponseMessage[] = answers.flatMap(a => [\n                { content: a[0], role: \"user\" },\n                { content: a[1].choices[0].message.content, role: \"assistant\" }\n            ]);\n\n            const request: ChatAppRequest = {\n                messages: [...messages, { content: question, role: \"user\" }],\n                stream: shouldStream,\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        suggest_followup_questions: useSuggestFollowupQuestions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFieldList,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput\n                    }\n                },\n                // ChatAppProtocol: Client must pass on any session state received from the server\n                session_state: answers.length ? answers[answers.length - 1][1].choices[0].session_state : null\n            };\n\n            const response = await chatApi(request, token);\n            if (!response.body) {\n                throw Error(\"No response body\");\n            }\n            if (shouldStream) {\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, setAnswers, response.body);\n                setAnswers([...answers, [question, parsedResponse]]);\n            } else {\n                const parsedResponse: ChatAppResponseOrError = await response.json();\n                if (response.status > 299 || !response.ok) {\n                    throw Error(parsedResponse.error || \"Unknown error\");\n                }\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\n            }\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n    useEffect(() => {\n        getConfig();\n    }, []);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setShouldStream(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSuggestFollowupQuestions(!!checked);\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            {/* <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" /> */}\n                            <img width=\"30%\" height=\"30%\" src={wallstreet}></img>\n                            <h1 className={styles.chatEmptyStateTitle}>Chat with Stock data</h1>\n                            <h2 className={styles.chatEmptyStateSubtitle}> Try me</h2>\n                            <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {isStreaming &&\n                                streamedAnswers.map((streamedAnswer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={streamedAnswer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={true}\n                                                key={index}\n                                                answer={streamedAnswer[1]}\n                                                isSelected={false}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {!isStreaming &&\n                                answers.map((answer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={answer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={false}\n                                                key={index}\n                                                answer={answer[1]}\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder=\"Type a new question (e.g. Any news on Apple Stock?)\"\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                        />\n                    </div>\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                <Panel\n                    headerText=\"Configure answer generation\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <TextField\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Override prompt template\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n\n                    <SpinButton\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieve this many search results:\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                    />\n                    <TextField className={styles.chatSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\n\n                    {showSemanticRankerOption && (\n                        <Checkbox\n                            className={styles.chatSettingsSeparator}\n                            checked={useSemanticRanker}\n                            label=\"Use semantic ranker for retrieval\"\n                            onChange={onUseSemanticRankerChange}\n                        />\n                    )}\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticCaptions}\n                        label=\"Use query-contextual summaries instead of whole documents\"\n                        onChange={onUseSemanticCaptionsChange}\n                        disabled={!useSemanticRanker}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSuggestFollowupQuestions}\n                        label=\"Suggest follow-up questions\"\n                        onChange={onUseSuggestFollowupQuestionsChange}\n                    />\n\n                    {showGPT4VOptions && (\n                        <GPT4VSettings\n                            gpt4vInputs={gpt4vInput}\n                            isUseGPT4V={useGPT4V}\n                            updateUseGPT4V={useGPT4V => {\n                                setUseGPT4V(useGPT4V);\n                            }}\n                            updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\n                        />\n                    )}\n\n                    {showVectorOption && (\n                        <VectorSettings\n                            showImageOptions={useGPT4V && showGPT4VOptions}\n                            updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\n                            updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\n                        />\n                    )}\n\n                    {useLogin && (\n                        <Checkbox\n                            className={styles.chatSettingsSeparator}\n                            checked={useOidSecurityFilter || requireAccessControl}\n                            label=\"Use oid security filter\"\n                            disabled={!isLoggedIn(client) || requireAccessControl}\n                            onChange={onUseOidSecurityFilterChange}\n                        />\n                    )}\n                    {useLogin && (\n                        <Checkbox\n                            className={styles.chatSettingsSeparator}\n                            checked={useGroupsSecurityFilter || requireAccessControl}\n                            label=\"Use groups security filter\"\n                            disabled={!isLoggedIn(client) || requireAccessControl}\n                            onChange={onUseGroupsSecurityFilterChange}\n                        />\n                    )}\n\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={shouldStream}\n                        label=\"Stream chat completion responses\"\n                        onChange={onShouldStreamChange}\n                    />\n                    {useLogin && <TokenClaimsDisplay />}\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication, EventType, AccountInfo } from \"@azure/msal-browser\";\nimport { msalConfig, useLogin } from \"./authConfig\";\n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport Chat from \"./pages/chat/Chat\";\n\nvar layout;\nif (useLogin) {\n    var msalInstance = new PublicClientApplication(msalConfig);\n\n    // Default to using the first account if no account is active on page load\n    if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n        // Account selection logic is app dependent. Adjust as needed for different use cases.\n        msalInstance.setActiveAccount(msalInstance.getActiveAccount());\n    }\n\n    // Listen for sign-in event and set active account\n    msalInstance.addEventCallback(event => {\n        if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n            const account = event.payload as AccountInfo;\n            msalInstance.setActiveAccount(account);\n        }\n    });\n\n    layout = (\n        <MsalProvider instance={msalInstance}>\n            <Layout />\n        </MsalProvider>\n    );\n} else {\n    layout = <Layout />;\n}\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: layout,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"qa\",\n                lazy: () => import(\"./pages/ask/Ask\")\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <RouterProvider router={router} />\n    </React.StrictMode>\n);\n"],"file":"assets/index-1cc27a6f.js"}